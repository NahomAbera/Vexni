// 6. Security Camera Object Tracker
// Save as: security_monitor.vexni
function monitor_camera(string camera_feed, list target_objects) {
    int alert_threshold = 0.8;  // 80% confidence threshold
    
    while (true) {
        image frame = get_camera_frame(camera_feed);
        list detections = detect_objects(frame);
        
        for (dict detection in detections) {
            string object = detection["label"];
            float confidence = detection["confidence"];
            
            if (object in target_objects and confidence > alert_threshold) {
                log_alert(object, confidence, get_current_time());
                save_image(frame, "alert_" + get_current_time() + ".jpg");
            }
        }
        
        sleep(1);  // Wait 1 second between checks
    }
}

function main() {
    list targets = ["person", "car", "truck"];
    monitor_camera("camera1", targets);
}

// 7. Multi-Modal Analysis
// Save as: scene_analyzer.vexni
function analyze_scene(string image_path) {
    image scene = load_image(image_path);
    
    // Perform multiple types of analysis
    list objects = detect_objects(scene);
    list faces = detect_faces(scene);
    string text = extract_text(scene);
    string scene_type = classify_image(scene);
    
    // Compile results
    dict analysis = {
        "scene_type": scene_type,
        "object_count": len(objects),
        "face_count": len(faces),
        "has_text": text != "",
        "detected_text": text,
        "objects": objects
    };
    
    return analysis;
}

function print_analysis(dict analysis) {
    print("Scene Analysis Results");
    print("=====================");
    print("Scene Type: " + analysis["scene_type"]);
    print("Objects Detected: " + analysis["object_count"]);
    print("Faces Detected: " + analysis["face_count"]);
    
    if (analysis["has_text"]) {
        print("\nDetected Text:");
        print(analysis["detected_text"]);
    }
    
    print("\nDetected Objects:");
    for (dict obj in analysis["objects"]) {
        print("- " + obj["label"] + " (" + obj["confidence"] + "%)");
    }
}

function main() {
    dict results = analyze_scene("scene.jpg");
    print_analysis(results);
}
